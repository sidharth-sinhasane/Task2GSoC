I need Python code that uses Ganga to approximate the value of pi using an accept-reject simulation method with one million simulations. The job should be split into a number of subjobs that each do thousand simulations. Steps to estimate π using accept-reject simulation: 1. Consider a unit square: A square with side length 1. 2. Inscribed quarter-circle: Inside this square, fit a quarter-circle of radius 1 (center at (0,0)). 3. Generate random points: Generate random (x, y) points where x and y are chosen randomly between 0 and 1. 4. Accept or Reject: * If the point (x,y) satisfies x^2 + y^2 ≤ 1, it lies inside the quarter-circle (accept). * Otherwise, reject it. 5. Estimate π: The ratio of points inside the quarter-circle to the total points approximates the ratio of the quarter-circle area to the square area. π ≈ 4 × (Accepted points/Total points) Use the following Ganga syntax and patterns: - Import Ganga with: from Ganga import * - Create a new job: j = Job() - Set application: j.application = Executable() or j.application = Python() - Configure application: j.application.exe = File('script.py') - Set backend: j.backend = Local() or j.backend = Dirac() - Use splitter: j.splitter = ArgSplitter(args=[[i] for i in range(1000)]) - Define output files: j.outputfiles = [LocalFile('output.txt')] - Submit job: j.submit() - Monitor job status: j.status - Access results: j.outputdir - Merge outputs: use postprocessors or manual merging Important requirements: - Create a Python application that performs the Monte Carlo simulation - Use ArgSplitter to divide the job into 1000 subjobs of 1000 simulations each - Collect and merge results from all subjobs - Calculate the final π approximation - Return only the complete, executable code with no explanations or comments - Ensure code handles job submission, monitoring, and result collection properly